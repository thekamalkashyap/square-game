/*   
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 .\scene.gltf -T 
Files: .\scene.gltf [21.77KB] > scene-transformed.glb [12.9KB] (41%)
Author: DEDROX (https://sketchfab.com/Raghavprasanna)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/blnk-100-concept-hovering-car-2a61db68f0b14185ba690d2e22dd037c
Title: blnk-100 concept hovering car
*/

import React, { useRef, useState } from "react";
import { Box, useGLTF, useKeyboardControls } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { RigidBody, useRapier, RapierRigidBody } from "@react-three/rapier";
import * as THREE from "three";

export default function Model(props) {
  const { nodes, materials } = useGLTF("/car.glb");
  const body = useRef(null);

  const { rapier, world } = useRapier();
  const rapierWorld = world;

  const [smoothedCameraPosition] = useState(
    () => new THREE.Vector3(10, 10, 10)
  );
  const [smoothedCameraTarget] = useState(() => new THREE.Vector3());

  const [subscribeKeys, getKeys] = useKeyboardControls();

  useFrame((state, delta) => {
    const { forward, backward, leftward, rightward } = getKeys();
    const impulse = { x: 0, y: 0, z: 0 };
    const torque = { x: 0, y: 0, z: 0 };

    const impulseStrength = 0.6 * delta;
    const torqueStrength = 0.2 * delta;

    if (forward) {
      impulse.z += impulseStrength;
      torque.x += torqueStrength;
    }
    if (rightward) {
      impulse.x -= impulseStrength;
      torque.z += torqueStrength;
    }
    if (backward) {
      impulse.z -= impulseStrength;
      torque.x -= torqueStrength;
    }
    if (leftward) {
      impulse.x += impulseStrength;
      torque.z -= torqueStrength;
    }

    if (body.current) {
      body.current.applyImpulse(impulse);
      body.current.applyTorqueImpulse(torque);

      const bodyPosition = body.current.translation();

      const cameraPosition = new THREE.Vector3();
      cameraPosition.copy(bodyPosition);
      cameraPosition.z -= 2.25;
      cameraPosition.y += 0.65;

      const cameraTarget = new THREE.Vector3();
      cameraTarget.copy(bodyPosition);
      cameraTarget.y += 0.25;

      smoothedCameraPosition.lerp(cameraPosition, 5 * delta);
      smoothedCameraTarget.lerp(cameraTarget, 5 * delta);

      state.camera.position.copy(smoothedCameraPosition);
      state.camera.lookAt(smoothedCameraTarget);
    }
  });

  return (
    <RigidBody
      ref={body}
      colliders="ball"
      position={[0, 1, 0]}
      friction={1}
      restitution={0.2}
      linearDamping={0.5}
      angularDamping={0.5}
    >
      <mesh castShadow receiveShadow scale={0.4}>
        <sphereGeometry args={[0.5]} />
        <meshStandardMaterial metalness={0} color={"purple"} />
      </mesh>
      {/* <group scale={0.12} rotation={[0, Math.PI / 2, 0]} dispose={null}>
        <mesh
          geometry={nodes.Object_4.geometry}
          material={materials.Material}
          position={[0, 0.932, 0]}
          scale={[1.715, 2.264, 2.264]}
        />
        <mesh
          geometry={nodes.Object_5.geometry}
          material={materials["Material.001"]}
          position={[0, 0.932, 0]}
          scale={[1.715, 2.264, 2.264]}
        />
        <mesh
          geometry={nodes.Object_6.geometry}
          material={materials["Material.002"]}
          position={[0, 0.932, 0]}
          scale={[1.715, 2.264, 2.264]}
        />
        <mesh
          geometry={nodes.Object_7.geometry}
          material={materials["Material.003"]}
          position={[0, 0.932, 0]}
          scale={[1.715, 2.264, 2.264]}
        />
      </group> */}
    </RigidBody>
  );
}

useGLTF.preload("/car.glb");
